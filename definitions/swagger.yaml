swagger: '2.0'
info:
  description: Service calls for various operations
  version: 1.0.0
  title: Application API
host: localhost
basePath: /api/v1
schemes:  
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: query
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the query string.  
     A valid JWT token is generated by the API and returned as answer of a call
     to the route /login giving a valid user & password.
consumes:
  - application/json      
produces:
  - application/json
paths:
  /user/userLogin:
    post:
      consumes:
        - application/x-www-form-urlencoded
      tags:
        - User
      summary: To check whether user exists in userpool or not and returns its data.
      description: to check whether user exists in userpool or not and returns its data
      operationId: userLoginPOST
      parameters:
        - name: email
          in: formData
          description: email address given during login
          required: true
          type: string
        - name: password
          in: formData
          description: password given during login
          required: true
          type: string
      responses:
        '200':
          description: Returns user id, type and other information about the user according to its type.
          schema:
            $ref: '#/definitions/userLoginResponse'
        '401':
          description: Returns error message in case of unauthorized login
          schema:
            $ref: '#/definitions/genericErrorResponse'
      x-swagger-router-controller: User
  /user/userDetails:
    get:
      tags:
        - User
      summary: To get user details.
      description: To get user details
      operationId: userDetailsGET
      parameters:
        - name: userId
          in: query
          description: Id of the user details required for
          required: true
          type: integer
      responses:
        '200':
          description: Returns user id, type and other information about the user according to its type.
          schema:
            $ref: '#/definitions/genericResponse'
        '401':
          description: Returns error message in case of unauthorized login
          schema:
            $ref: '#/definitions/genericErrorResponse'
      x-swagger-router-controller: User
  /user/userInsertData:
    post:
      consumes:
        - application/x-www-form-urlencoded
      tags:
        - User
      summary: insert user data
      description: to check insert user data
      operationId: userInsertData
      parameters:
        - name: usedID
          in: formData
          description: userID must be given
          required: true
          type: string
        - name: firstname
          in: formData
          description: firstname given during login
          required: true
          type: string
        - name: lastname
          in: formData
          description: lastname given during login
          required: true
          type: string
        - name: phone
          in: formData
          description: number given during login
          required: true
          type: number
        - name: password
          in: formData
          description: password given during login
          required: true
          type: string
      responses:
        '200':
          description: Returns user id, type and other information about the user according to its type.
          schema:
            $ref: '#/definitions/userLoginResponse'
        '401':
          description: Returns error message in case of unauthorized login
          schema:
            $ref: '#/definitions/genericErrorResponse'
      x-swagger-router-controller: User
definitions:
  userLoginResponse:
    properties:
      success:
        type: boolean
        description: "true for success. Other as per message!"
      message:
        type: string
        description: 'Will be "success" or the error message details, if applicable'
      data:
        type: object
        properties:
          userId:
            type: string
            description: "Id of the user in the database"
          firstName:
            type: string
            description: "FirstName of the user"
          lastName:
            type: string
            description: "LastName of the user"
          phone:
            type: number
            description: "Number of the user"
          password:
            type: string
            description: "Password of the user"
  genericErrorResponse:
    properties:
      success:
        type: boolean
        description: "true for success, false for error."
      message:
        type: string
        description: "Error message"
  genericResponse:
    properties:
      success:
        type: boolean
        description: "true for success, false for error."
      message:
        type: string
        description: "Error message"